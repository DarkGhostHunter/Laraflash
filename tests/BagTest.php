<?php /** @noinspection JsonEncodingApiUsageInspection */

namespace Tests;

use DarkGhostHunter\Laralerts\Alert;
use DarkGhostHunter\Laralerts\Bag;
use Error;
use Orchestra\Testbench\TestCase;

class BagTest extends TestCase
{
    use RegistersPackage;

    /**
     * @var \DarkGhostHunter\Laralerts\Bag
     */
    protected $bag;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->bag = $this->app[Bag::class];
    }

    public function test_adds_new_alert_to_bag()
    {
        $alert = $this->bag->new();

        static::assertSame($alert, $this->bag->all()[0]);
    }

    public function test_keeps_single_alert()
    {
        $this->bag->new()->persistAs('foo')->message('bar');

        static::assertCount(1, $this->bag->all());
        static::assertCount(1, $this->bag->allPersistent());
        static::assertSame('bar', $this->bag->all()[0]->getMessage());

        $this->bag->unique('foo')->message('baz');

        static::assertCount(1, $this->bag->all());
        static::assertCount(1, $this->bag->allPersistent());
        static::assertSame('baz', $this->bag->all()[0]->getMessage());
    }

    public function test_returns_all_persistent()
    {
        $this->bag->new()->persistAs('foo');
        $this->bag->new();

        static::assertCount(2, $this->bag->all());
        static::assertCount(1, $this->bag->allPersistent());
    }

    public function test_abandons_persisted_alert()
    {
        $this->bag->new()->persistAs('foo');

        static::assertCount(1, $this->bag->all());

        static::assertFalse($this->bag->abandon('bar'));
        static::assertTrue($this->bag->abandon('foo'));
        static::assertFalse($this->bag->abandon('foo'));

        static::assertEmpty($this->bag->all());
    }

    public function test_flushes_all_alerts()
    {
        $this->bag->new()->persistAs('foo');
        $this->bag->new();

        static::assertCount(2, $this->bag->all());

        $this->bag->flush();

        static::assertEmpty($this->bag->all());
    }

    public function test_check_has_persistent()
    {
        $this->bag->new()->persistAs('foo');
        $this->bag->new();

        static::assertTrue($this->bag->hasPersistent('foo'));
        static::assertFalse($this->bag->hasPersistent('bar'));
    }

    public function test_when_true_creates_alert()
    {
        $this->bag->when(true)->message('foo')->types('bar');

        static::assertCount(1, $this->bag->all());
    }

    public function test_when_false_creates_empty_alert()
    {
        $this->bag->when(false)->message('foo')->types('bar');

        static::assertEmpty($this->bag->all());
    }

    public function test_unless_false_creates_alert()
    {
        $this->bag->unless(false)->message('foo')->types('bar');

        static::assertCount(1, $this->bag->all());
    }

    public function test_unless_true_creates_empty_alert()
    {
        $this->bag->unless(true)->message('foo')->types('bar');

        static::assertEmpty($this->bag->all());
    }

    public function test_adds_json_alert()
    {
        $alert = $this->bag->fromJson(
            json_encode(
                [
                    'message' => 'foo',
                    'types' => ['bar', 'baz'],
                    'dismissible' => true,
                ]
            )
        );

        static::assertSame('foo', $alert->getMessage());
        static::assertSame(['bar', 'baz'], $alert->getTypes());
        static::assertTrue($alert->isDismissible());

        static::assertCount(1, $this->bag->all());
        static::assertCount(0, $this->bag->allPersistent());


        $alert = $this->bag->fromJson(
            json_encode(
                [
                    'message' => 'foo',
                    'types' => ['bar', 'baz'],
                    'dismissible' => true,
                    'persistent' => 'foo-bar',
                ]
            )
        );

        static::assertEquals('foo-bar', $alert->getPersistKey());
        static::assertTrue($alert->isPersistent());
    }

    public function test_passes_calls_to_alert()
    {
        static::assertInstanceOf(Alert::class, $this->bag->message('foo'));
    }

    public function test_exception_if_method_doesnt_exists()
    {
        $this->expectException(Error::class);
        $this->expectExceptionMessage('Call to undefined method DarkGhostHunter\Laralerts\Alert::inexistent()');

        $this->bag->inexistent('foo');
    }
}
